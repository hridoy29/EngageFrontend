@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Authentication.WebAssembly.Msal.Models
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject IJSRuntime JSRuntime
<AuthorizeView>
    <Authorized>
        <nav class="navbar navbar-expand-lg navbar-light bg-light navbar-position" style=" top:0px !important ">
            @*<i class="@(IsSideBarOpen?"fa-solid fa-bars":"fa-solid fa-bars-staggered") Sidebar-Icon" @onclick="@(IsSideBarOpen?closesidebar:sidebarshow)" style=""></i>*@
            <button class="Sidebar-Icon" @onclick="@(IsSideBarOpen?closesidebar:sidebarshow)" style="background: transparent;border: none;"><i class="fa-solid fa-bars" style=""></i></button>
            <a class="navbar-brand navbar-brand-margin" style="text-align:start;display:flex;align-items:center"@onclick="@navigateToHome"><img src="images/engage-logo2.0.png" width="110" height="30" style="position: fixed; left: 58px;" /></a>
            
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse navigation-div-ul" id="navbarNav2" style="justify-content:end !important">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class=" btn  btn -link" style="color: #0366d6;">@context.User.Identity.Name</a>
                    </li>
                    <li class="nav-item">
                        <button class=" btn  btn -link" @onclick="BeginSignOut">Log out</button>
                    </li>
                </ul>

            </div>
        </nav>

        <i class=""></i>
        
        
    </Authorized>
</AuthorizeView>

@code{
    [CascadingParameter]
    private RemoteUserAccount AuthState { get; set; }

    private bool IsSideBarOpen { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        closesidebar();
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
    private async void sidebarshow()
    {
        if (AuthState is not null)
        {
            var a= "";
        }
        IsSideBarOpen = true;
        Console.WriteLine("In side Change");
        await JSRuntime.InvokeVoidAsync("sidebarchange");
    }
    private async void closesidebar()
    {
        IsSideBarOpen = false;
        Console.WriteLine("In side Change: close");
        await JSRuntime.InvokeVoidAsync("sidebarclose");
    }
    private async void navigateToHome()
    {
        Navigation.NavigateTo("/",true);
    }
}
<style>
    .nav-link{
        padding:0;
    }
    .navbar-position {
        width: 100% !important;
        position: fixed !important;
        z-index: 99999 !important;
    }
    .Sidebar-Icon {
        position: fixed;
        margin-left: 13px;
    }
    @@media (max-width: 992px) {
        .Sidebar-Icon {
            position: unset;
        }
    }
</style>