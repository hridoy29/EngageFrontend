@*@using System.Xml.XPath;
@using System.Xml;
@using System.Xml.Xsl;
@using System.Text;
@using Engage.APIs.ClientDetails;*@
@inject IJSRuntime JSRuntime
@*@inject IClientDetailsServices _clientService;*@
@using Azure.Storage.Blobs;
@using Azure.Storage.Files.Shares;
@using Azure.Storage.Files.Shares.Models;
@using Engage.Views.Files;
@using Microsoft.AspNetCore.Components.Web;
@using System.Text;
@inject IAdminService adminService
<AuthorizeView>
    <Authorized>
        @{
            if (loading)
            {
                <div class="preloader d-flex justify-content-center" style="margin-left:0px !important; width:100% ">
                    <img src="Gif/EnagePreloader.gif" />
                </div>
            }
            else
            {
                <div class="row row-photo-clicked" style="justify-content: center;align-items: center;gap: 30px;margin-top:35px;" tabindex="0" @onkeyup="@EnterPhoto">
                    <div class="arrow-hover" style="" @onclick="@(args=>PrevImage())">
                        <i class="fa-solid fa fa-angle-left " style="font-size: 25px;"></i>
                    </div>
                    <div style="position: relative; ">
                        @if (ImagesData.SelectedFileType.Contains("pdf"))
                        {
                            <div style="position: absolute; top: -37px; right: 0;">
                                <div class="dropdown">
                                    <button class="btn btn-primary dropdown-toggle download-pdf-btn" type="button" data-toggle="dropdown" style="background:rgba(0,91,132,1); color:white;" onfocus="">
                                        Download
                                        <span class="caret"></span>
                                    </button>
                                    <ul class="dropdown-menu" style="padding:0;border-radius:5px;min-width:7.3rem; ">
                                        <li class="download-pdf" @onclick="@(args=>DownloadImage())">pdf</li>
                                        @{
                                            if (originalFormat is not null && originalFormat.Count > 0)
                                            {
                                                foreach (var item in originalFormat)
                                                {
                                                    <li class="download-pdf" @onclick="@(args=>DownloadOriginal(item))">@item.fileType</li>
                                                }
                                            }
                                        }

                                    </ul>
                                </div>
                            </div>
                            <iframe src="@ImagesData.SelectedImage" style="min-width: 722px; height: 400px; border: none;"></iframe>
                        }
                        else if (ImagesData.SelectedFileType.Contains("png") || ImagesData.SelectedFileType.Contains("jpg"))
                        {
                            <div style="position: absolute; top: -37px; right: 0;">
                                <button type="button" class="btn download-img-btn" style="background:rgba(0,91,132,1); color:white;" @onclick="@(args=>DownloadImage())">Download</button>
                            </div>
                            <img class="img-gallary" src="@ImagesData.SelectedImage" style="max-width: 100%; height: 400px;object-fit:fill;background-color: white;background-blend-mode: multiply;padding: 5px;border-radius: 10px;" />
                        }
                        else if (ImagesData.SelectedFileType.Contains("mp3") || ImagesData.SelectedFileType.Contains("mp3"))
                        {
                            <audio controls allow="autoplay">
                                <source src="@ImagesData.SelectedImage" />
                                Your browser does not support the audio element.
                            </audio>

                        }
                    </div>
                    <div class="arrow-hover" style="" @onclick="@(args=>NextImage())">
                        <i class="fa-solid fa fa-angle-right " style="font-size: 25px;"></i>
                    </div>

                </div>
                <br />
                <div class="d-flex scrollbar row-photo-clicked" style="gap:15px;overflow-x: auto; justify-content:center;" tabindex="0" @onkeyup="@EnterPhoto">
                    @{
                        var count = 1;
                        foreach (var item in ImagesData.Images)
                        {

                            @if (item.fileType.Contains("pdf"))
                            {
                                <i class="far fa-file-pdf fa-5x" id="@count" style="width: 90px;text-align:center;height: 90px;object-fit:contain;background:white;padding:2.5px;border-radius: 10px; @(item.Id==ImagesData.Id?"border: 2px solid rgba(0,91,132,1);;":"") " @onclick="(args =>
                selectImage(item.Id))"></i>
                            }
                            else if (item.fileType.Contains("txt"))
                            {
                                <i class="far fa-file-alt fa-5x" id="@count" style="width: 90px;text-align:center; height: 90px;object-fit:contain;background:white;padding:2px;border-radius: 10px; @(item.Id==ImagesData.Id?"border: 2px solid rgba(0,91,132,1);;":"") " @onclick="(args =>
                selectImage(item.Id))"></i>
                            }
                            else if (item.fileType.Contains("mp3"))
                            {
                                <i class="fa-regular fa-file-audio fa-5x" id="@count" style="width: 90px;text-align:center; height: 90px;object-fit:contain;background:white;padding:2px;border-radius: 10px; @(item.Id==ImagesData.Id?"border: 2px solid rgba(0,91,132,1);;":"") " @onclick="(args =>
                selectImage(item.Id))"></i>
                            }
                            else if (item.fileType.Contains("png"))
                            {
                                <img src="@item.fileData" id="@count" style="width: 90px;height: 90px;object-fit:contain;background:white;padding:5px;border-radius: 10px; @(item.Id==ImagesData.Id?"border: 2px solid rgba(0,91,132,1);;":"") " @onclick="(args =>
                selectImage(item.Id))" />
                            }

                            count++;
                        }
                    }
                </div>
            }
        }


    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public GalleryDataView ImagesData { get; set; }
    private readonly HttpClient _httpClient = new HttpClient();
    public bool loading { get; set; } = false;
    List<FileDetailsView> originalFormat = new();
    bool hidden = true;

    protected override async Task OnInitializedAsync()
    {
        originalFormat = new();
        var imagevalue = ImagesData.Images.Where(x => x.Id == ImagesData.Id).FirstOrDefault();
        var splitedName = imagevalue.fileName.Split(".");

        var orginalImages = ImagesData.Images.Where(x => x.fileName.Contains(splitedName[0]) && x.fileName != imagevalue.fileName);

        foreach (var item in orginalImages)
        {
            originalFormat.Add(item);
        }
    }

    public async Task playAudio()
    {
        hidden = !hidden;
    }

    private async Task DownloadImage()
    {
        var data = ImagesData.Images.Where(x => x.Id == ImagesData.Id).FirstOrDefault();
        var selectedImage = ImagesData.SelectedImage;
        await JSRuntime.InvokeAsync<object>("saveAsFile", data.fileName, selectedImage);
    }
    private async Task DownloadOriginal(FileDetailsView fileDetailsView)
    {
        var data = fileDetailsView.fileName;
        var selectedImage = fileDetailsView.fileData;
        await JSRuntime.InvokeAsync<object>("saveAsFile", data, selectedImage);
    }
    public void selectImage(int Id)
    {
        var data = ImagesData.Images.Where(x => x.Id == Id).FirstOrDefault();
        ImagesData.SelectedImage = data.fileData;
        ImagesData.Id = data.Id;
        ImagesData.SelectedFileType = data.fileType;
        GotoImage();
    }

    public async Task EnterPhoto(KeyboardEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("ClearCache");
        if (e.Code == "ArrowLeft")
        {
            PrevImage();
        }
        else if (e.Code == "ArrowRight")
        {
            NextImage();
        }
    }

    public async Task NextImage()
    {
        var imagevalue = ImagesData.Images.Where(x => x.Id == ImagesData.Id).FirstOrDefault();
        var index = ImagesData.Images.IndexOf(imagevalue);
        if (index >= ImagesData.Images.Count() - 1)
        {
            var data = ImagesData.Images[0];
            if (!data.fileType.Contains("docx") && !data.fileType.Contains("xlsx"))
            {
                ImagesData.SelectedImage = data.fileData;
                ImagesData.Id = data.Id;
                ImagesData.SelectedFileType = data.fileType;
            }
            else
            {
                ImagesData.Id = data.Id;
                NextImage();
            }

        }
        else
        {
            var data = ImagesData.Images[index + 1];
            if (!data.fileType.Contains("docx") && !data.fileType.Contains("xlsx"))
            {
                ImagesData.SelectedImage = data.fileData;
                ImagesData.Id = data.Id;
                ImagesData.SelectedFileType = data.fileType;
            }
            else
            {
                ImagesData.Id = data.Id;
                NextImage();
            }

        }
        GotoImage();


    }

    public async Task PrevImage()
    {
        var imagevalue = ImagesData.Images.Where(x => x.Id == ImagesData.Id).FirstOrDefault();
        var index = ImagesData.Images.IndexOf(imagevalue);
        if ((index - 1) >= 0)
        {
            var data = ImagesData.Images[index - 1];
            if (!data.fileType.Contains("docx") && !data.fileType.Contains("xlsx"))
            {
                ImagesData.SelectedImage = data.fileData;
                ImagesData.Id = data.Id;
                ImagesData.SelectedFileType = data.fileType;
            }
            else
            {
                ImagesData.Id = data.Id;
                PrevImage();
            }
        }
        else
        {
            var data = ImagesData.Images[ImagesData.Images.Count() - 1];
            if (!data.fileType.Contains("docx") && !data.fileType.Contains("xlsx"))
            {
                ImagesData.SelectedImage = data.fileData;
                ImagesData.Id = data.Id;
                ImagesData.SelectedFileType = data.fileType;
            }
            else
            {
                ImagesData.Id = data.Id;
                PrevImage();
            }
        }
        GotoImage();
    }

    public async Task GotoImage()
    {
        originalFormat = new();
        var imagevalue = ImagesData.Images.Where(x => x.Id == ImagesData.Id).FirstOrDefault();
        var index = ImagesData.Images.IndexOf(imagevalue);
        //if (!imagevalue.fileType.Contains("xlsx") && !imagevalue.fileType.Contains("docx"))
        //{
        //    var splitedName = imagevalue.fileName.Split(".");

        //    var orginalImages = ImagesData.Images.Where(x => x.fileName.Contains(splitedName[0]) && x.fileName != imagevalue.fileName);

        //    foreach (var item in orginalImages)
        //    {
        //        originalFormat.Add(item);
        //    }
        //    await JSRuntime.InvokeVoidAsync("scrollToView", index + 1);
        //}
        //else
        //{
        //    await JSRuntime.InvokeVoidAsync("scrollToView", index + 1);
        //}
        await JSRuntime.InvokeVoidAsync("scrollToView", index + 1);
    }
}
<style>
    .rz-dialog {
        background: transparent;
        box-shadow: none;
        width: fit-content !important;
    }

    .arrow-hover {
        color: white;
        background: rgba(0,91,132,1);
        height: 35px;
        width: 35px;
        padding: 5px 9px;
        border-radius: 5px;
    }

    .download-pdf {
        padding: 3px 10px;
        color: rgba(0,91,132,1);
    }

    .download-pdf-btn:focus {
        box-shadow: none;
        outline: none;
    }

    .download-img-btn:focus {
        box-shadow: none;
        outline: none;
    }

    .download-img-btn:hover {
        background: rgb(29 108 145) !important;
    }

    .download-pdf-btn:hover {
        background: rgb(29 108 145) !important;
    }

    .download-pdf-btn:focus-visible {
        outline: none;
    }

    .download-img-btn:focus-visible {
        outline: none;
    }

    .download-pdf:hover {
        background: rgba(210 213 215);
    }

    @@media (max-width: 1450px) {
        .img-gallary {
            width: 722px;
        }
    }

    .arrow-hover:hover {
        background: white;
        color: rgba(0,91,132,1);
    }

    .scrollbar::-webkit-scrollbar {
        height: 8px;
        margin-top: 5px;
    }

    .row-photo-clicked:focus-visible {
        outline: none;
    }

    .scrollbar::-webkit-scrollbar-track {
        -webkit-box-shadow: inset 0 0 20px white;
        border-radius: 10px;
    }

    .scrollbar::-webkit-scrollbar-thumb {
        border-radius: 10px;
        -webkit-box-shadow: inset 0 0 6px grey;
    }

    .scrollbar {
        scrollbar-width: thin;
    }
</style>